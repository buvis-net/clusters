---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  dependsOn:
  - name: ingress-nginx
    namespace: kube-tools
  - name: cert-manager
    namespace: kube-tools
  - name: oauth2-proxy
    namespace: kube-tools
  - name: openebs
    namespace: storage
  interval: 5m
  install:
    timeout: 15m
    remediation:
      retries: 5
  upgrade:
    timeout: 15m
    remediation:
      retries: 5
      remediateLastFailure: true
    cleanupOnFail: true
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 44.2.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 5m
  timeout: 20m
  values:
    alertmanager:
      config:
        global:
          slack_api_url: ${SECRET_SLACK_PROMETHEUS_WEBHOOK}
          resolve_timeout: 5m
        receivers:
        - name: "null"
        - name: "slack"
          slack_configs:
          - channel: "#prometheus"
            icon_url: https://avatars3.githubusercontent.com/u/3380462
            username: "Prometheus"
            send_resolved: true
            title: |-
              [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
            text: >-
              {{ range .Alerts -}}
                *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
              {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}
              *Details:*
                {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                {{ end }}
              {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "slack"
          routes:
          - receiver: "null"
            matchers:
            - alertname =~ "InfoInhibitor|Watchdog"
          - receiver: "slack"
            matchers:
            - severity = "critical"
            continue: true
        inhibit_rules:
        - source_matchers:
          - severity = "critical"
          target_matchers:
          - severity = "warning"
          equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        annotations:
          kubernetes.io/ingress.class: nginx
          cert-manager.io/cluster-issuer: letsencrypt-production
          nginx.ingress.kubernetes.io/auth-url: "https://auth.buvis.net/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://auth.buvis.net/oauth2/start?rd=https%3A%2F%2F$host$request_uri"
        hosts:
        - alertmanager.buvis.net
        tls:
        - secretName: alertmanager-crt
          hosts:
          - alertmanager.buvis.net
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            metadata:
              name: alert
            spec:
              storageClassName: openebs-jiva-csi-default
              resources:
                requests:
                  storage: 1Gi
    kube-state-metrics:
      metricLabelsAllowlist:
      - "persistentvolumeclaims=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
            - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    grafana:
      enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
        - action: replace
          sourceLabels:
          - node
          targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeEtcd:
      enabled: false
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        annotations:
          kubernetes.io/ingress.class: nginx
          cert-manager.io/cluster-issuer: letsencrypt-production
          nginx.ingress.kubernetes.io/auth-url: "https://auth.buvis.net/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://auth.buvis.net/oauth2/start?rd=https%3A%2F%2F$host$request_uri"
        hosts:
        - prometheus.buvis.net
        tls:
        - secretName: prometheus-crt
          hosts:
          - prometheus.buvis.net
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      thanosIngress:
        enabled: true
        pathType: Prefix
        annotations:
          kubernetes.io/ingress.class: nginx
          cert-manager.io/cluster-issuer: letsencrypt-production
          nginx.ingress.kubernetes.io/auth-url: "https://auth.buvis.net/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://auth.buvis.net/oauth2/start?rd=https%3A%2F%2F$host$request_uri"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
        hosts:
        - thanos-sidecar.buvis.net
        tls:
        - secretName: thanos-sidecar-crt
          hosts:
          - thanos-sidecar.buvis.net
      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: __replica__
        externalLabels:
          cluster: buvis-home
        thanos:
          image: quay.io/thanos/thanos:v0.30.1
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: v0.29.0
        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 7d
        retentionSize: 20GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            metadata:
              name: kps
            spec:
              storageClassName: openebs-jiva-csi-default
              resources:
                requests:
                  storage: 25Gi
        resources:
          requests:
            cpu: 10m
            memory: 2000Mi
          limits:
            memory: 8000Mi
